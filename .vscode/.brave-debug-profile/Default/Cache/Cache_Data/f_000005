import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/App.jsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=705388fd"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import * as RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.$RefreshReg$) {
    throw new Error(
      "@vitejs/plugin-react can't detect preamble. Something is wrong."
    );
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = RefreshRuntime.getRefreshReg("C:/Projets/CRAutomatique2/frontend/src/App.jsx");
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=705388fd"; const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react; const useEffect = __vite__cjsImport3_react["useEffect"]; const useMemo = __vite__cjsImport3_react["useMemo"]; const useState = __vite__cjsImport3_react["useState"];
import { AppProvider, useAppContext } from "/src/context/AppContext.jsx";
import { api } from "/src/api/client.js";
import { useInterval } from "/src/hooks/useInterval.js";
import UploadForm from "/src/components/UploadForm.jsx";
import JobDashboard from "/src/components/JobDashboard.jsx";
import ConfigPanel from "/src/components/ConfigPanel.jsx";
import TemplateManager from "/src/components/TemplateManager.jsx";
import "/src/styles/app.css";
const TABS = [
  { id: "upload", label: "Nouveau traitement" },
  { id: "jobs", label: "Historique" },
  { id: "config", label: "Configuration" },
  { id: "templates", label: "Gabarits" }
];
function AppShell() {
  _s();
  const { config, setConfig, templates, setTemplates, jobs, setJobs } = useAppContext();
  const [activeTab, setActiveTab] = useState("upload");
  const [selectedJobId, setSelectedJobId] = useState(null);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const selectedJob = useMemo(() => jobs.find((job) => job.id === selectedJobId) || null, [jobs, selectedJobId]);
  useEffect(() => {
    async function bootstrap() {
      try {
        const [initialConfig, tpl, jobList] = await Promise.all(
          [
            api.getConfig(),
            api.listTemplates(),
            api.listJobs()
          ]
        );
        setConfig(initialConfig);
        setTemplates(tpl);
        setJobs(jobList);
        setSelectedJobId(jobList[0]?.id || null);
      } catch (err) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    }
    bootstrap();
  }, [setConfig, setTemplates, setJobs]);
  useInterval(async () => {
    try {
      const jobList = await api.listJobs();
      setJobs(jobList);
      if (selectedJobId && !jobList.some((job) => job.id === selectedJobId)) {
        setSelectedJobId(jobList[0]?.id || null);
      }
    } catch (err) {
      setError(err.message);
    }
  }, 4e3);
  const handleUpload = async (payload) => {
    setError(null);
    try {
      const job = await api.createJob(payload);
      const refreshed = await api.listJobs();
      setJobs(refreshed);
      setSelectedJobId(job.id);
      setActiveTab("jobs");
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };
  const handleDeleteJob = async (jobId) => {
    setError(null);
    try {
      await api.deleteJob(jobId);
      const refreshed = await api.listJobs();
      setJobs(refreshed);
      if (selectedJobId === jobId) {
        setSelectedJobId(refreshed[0]?.id || null);
      }
    } catch (err) {
      setError(err.message);
    }
  };
  const handleSelectJob = (jobId) => {
    setSelectedJobId(jobId);
    setActiveTab("jobs");
  };
  const handleSaveConfig = async (nextConfig) => {
    setError(null);
    const updated = await api.updateConfig(nextConfig);
    setConfig(updated);
  };
  const handleCreateTemplate = async (template) => {
    try {
      const created = await api.createTemplate(template);
      setTemplates(await api.listTemplates());
      return created;
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };
  const handleUpdateTemplate = async (id, template) => {
    try {
      await api.updateTemplate(id, template);
      setTemplates(await api.listTemplates());
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };
  const handleDeleteTemplate = async (id) => {
    try {
      await api.deleteTemplate(id);
      setTemplates(await api.listTemplates());
    } catch (err) {
      setError(err.message);
    }
  };
  return /* @__PURE__ */ jsxDEV("div", { className: "app-shell", children: [
    /* @__PURE__ */ jsxDEV("header", { className: "app-header", children: [
      /* @__PURE__ */ jsxDEV("div", { children: [
        /* @__PURE__ */ jsxDEV("h1", { children: "CR Automatique" }, void 0, false, {
          fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
          lineNumber: 152,
          columnNumber: 11
        }, this),
        /* @__PURE__ */ jsxDEV("p", { className: "subtitle", children: "Traitement audio local + résumés assistés OpenAI" }, void 0, false, {
          fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
          lineNumber: 153,
          columnNumber: 11
        }, this)
      ] }, void 0, true, {
        fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
        lineNumber: 151,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ jsxDEV("nav", { className: "tabs", "aria-label": "Navigation principale", children: TABS.map(
        (tab) => /* @__PURE__ */ jsxDEV(
          "button",
          {
            type: "button",
            className: tab.id === activeTab ? "tab active" : "tab",
            onClick: () => setActiveTab(tab.id),
            children: tab.label
          },
          tab.id,
          false,
          {
            fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
            lineNumber: 157,
            columnNumber: 11
          },
          this
        )
      ) }, void 0, false, {
        fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
        lineNumber: 155,
        columnNumber: 9
      }, this)
    ] }, void 0, true, {
      fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
      lineNumber: 150,
      columnNumber: 7
    }, this),
    error && /* @__PURE__ */ jsxDEV("div", { className: "toast error", children: error }, void 0, false, {
      fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
      lineNumber: 169,
      columnNumber: 17
    }, this),
    isLoading ? /* @__PURE__ */ jsxDEV("div", { className: "loading", children: "Chargement en cours..." }, void 0, false, {
      fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
      lineNumber: 171,
      columnNumber: 7
    }, this) : /* @__PURE__ */ jsxDEV("main", { className: "app-content", children: [
      activeTab === "upload" && /* @__PURE__ */ jsxDEV(UploadForm, { templates, onSubmit: handleUpload }, void 0, false, {
        fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
        lineNumber: 174,
        columnNumber: 38
      }, this),
      activeTab === "jobs" && /* @__PURE__ */ jsxDEV(
        JobDashboard,
        {
          jobs,
          selectedJob,
          onSelectJob: handleSelectJob,
          onDeleteJob: handleDeleteJob
        },
        void 0,
        false,
        {
          fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
          lineNumber: 176,
          columnNumber: 9
        },
        this
      ),
      activeTab === "config" && config && /* @__PURE__ */ jsxDEV(ConfigPanel, { config, onSave: handleSaveConfig }, void 0, false, {
        fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
        lineNumber: 184,
        columnNumber: 9
      }, this),
      activeTab === "templates" && /* @__PURE__ */ jsxDEV(
        TemplateManager,
        {
          templates,
          onCreate: handleCreateTemplate,
          onUpdate: handleUpdateTemplate,
          onDelete: handleDeleteTemplate
        },
        void 0,
        false,
        {
          fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
          lineNumber: 187,
          columnNumber: 9
        },
        this
      )
    ] }, void 0, true, {
      fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
      lineNumber: 173,
      columnNumber: 7
    }, this)
  ] }, void 0, true, {
    fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
    lineNumber: 149,
    columnNumber: 5
  }, this);
}
_s(AppShell, "076ik0wBV/h/iZgdzq0iolbbIRw=", false, function() {
  return [useAppContext, useInterval];
});
_c = AppShell;
export default function App() {
  return /* @__PURE__ */ jsxDEV(AppProvider, { children: /* @__PURE__ */ jsxDEV(AppShell, {}, void 0, false, {
    fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
    lineNumber: 203,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "C:/Projets/CRAutomatique2/frontend/src/App.jsx",
    lineNumber: 202,
    columnNumber: 5
  }, this);
}
_c2 = App;
var _c, _c2;
$RefreshReg$(_c, "AppShell");
$RefreshReg$(_c2, "App");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Projets/CRAutomatique2/frontend/src/App.jsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("C:/Projets/CRAutomatique2/frontend/src/App.jsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,